version: '3.8'

services:
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ai_content_generator
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   image: ai-posts-frontend:1.0.0
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NODE_ENV=production
  #     - NEXT_PUBLIC_API_URL=http://backend:3001
  #   depends_on:
  #     - backend
  #   networks:
  #     - app-network
  #   restart: unless-stopped

  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   image: ai-posts-backend:1.0.0
  #   ports:
  #     - "3001:3001"
  #   environment:
  #     - NODE_ENV=production
  #     - JWT_SECRET=your-secret-key
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #     - PORT=3001
  #     - DB_HOST=postgres
  #     - DB_PORT=5432
  #     - DB_USERNAME=postgres
  #     - DB_PASSWORD=postgres
  #     - DB_NAME=ai_content_generator
  #     - REDIS_URL=redis://redis:6379
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - app-network
  #   restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge 